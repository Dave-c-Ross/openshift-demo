apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-oauth
  namespace: openshift-acm-policies
  annotations:
    policy.open-cluster-management.io/categories: Access Management
    policy.open-cluster-management.io/controls: Configurations
    policy.open-cluster-management.io/standards: Configurations
spec:
  
  disabled: false

  remediationAction: enforce
  policy-templates:

    ## Create the openid secret (openid secret is mandatory, so if we use a public instance, just throw somehing random here)
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: oauth-openid-secret
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            include:
            - "openshift-config"
          object-templates:

          - complianceType: musthave
            objectDefinition:

              apiVersion: v1
              data:
                clientSecret: b3BlbnNoaWZ0LXNlY3JldA==
              kind: Secret
              metadata:
                name: openid-client-secret
                namespace: openshift-config
              type: Opaque

    ## Add oAuth provider to any cluster we manage
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: oauth-configuration
        spec:
          remediationAction: enforce
          severity: low
          object-templates:

          - complianceType: mustonlyhave
            objectDefinition:

              apiVersion: config.openshift.io/v1
              kind: OAuth
              metadata:
                name: cluster
                annotations:
                  include.release.openshift.io/self-managed-high-availability: "true"
                  release.openshift.io/create-only: "true"
              spec:
                identityProviders:
                - mappingMethod: add
                  name: 'SSO'
                  openID:
                    claims:
                      email:
                      - email
                      groups:
                      - groups
                      name:
                      - name
                      preferredUsername:
                      - preferred_username
                    clientID: openshift-sso
                    clientSecret:
                      name: openid-client-secret
                    extraScopes: []
                    issuer: https://keycloak-openshift-sso.apps.maindeck.fleetcarrier.ca/auth/realms/openshift-sso
                  type: OpenID

    ## Provide a logout redirect URL, hence when a user hit Logout link, a logout request will be sent to RHSSO.
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: oauth-console-logout-url
        spec:
          remediationAction: enforce
          severity: low
          object-templates:

          - complianceType: musthave
            objectDefinition:

              apiVersion: config.openshift.io/v1
              kind: Console
              metadata:
                name: cluster
              spec:
                authentication:
                  logoutRedirect: "https://keycloak-openshift-sso.apps.maindeck.fleetcarrier.ca/auth/realms/openshift-sso/protocol/openid-connect/logout"

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: cluster-admin-group
        spec:
          remediationAction: enforce
          severity: low
          object-templates:

          - complianceType: musthave
            objectDefinition:
                          
              kind: Group
              apiVersion: user.openshift.io/v1
              metadata:
                name: administrators
              users: []

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: cluster-guest-group
        spec:
          remediationAction: enforce
          severity: low
          object-templates:

          - complianceType: musthave
            objectDefinition:
                          
              kind: Group
              apiVersion: user.openshift.io/v1
              metadata:
                name: guests
              users: []

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: cluster-admin-binding
        spec:
          remediationAction: enforce
          severity: low
          object-templates:

          - complianceType: musthave
            objectDefinition:

              kind: ClusterRoleBinding
              apiVersion: rbac.authorization.k8s.io/v1
              metadata:
                name: administrators
              subjects:
                - kind: Group
                  apiGroup: rbac.authorization.k8s.io
                  name: administrators
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: cluster-admin

---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: openshift-oauth-placement
  namespace: openshift-acm-policies
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - key: managed
        operator: In
        values:
          - "true"
      - key: topgun
        operator: In
        values:
          - "true"

---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: openshift-oauth-placement-binding
  namespace: openshift-acm-policies
placementRef:
  apiGroup: apps.open-cluster-management.io
  kind: PlacementRule
  name: openshift-oauth-placement
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: openshift-oauth
